name: Test Include

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

env:
  DEFAULT_PYTHON_VERSION: 3.12

jobs:
  prepare-matrix:
    name: Prepare Python/Django matrix
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install the linters
        run: |
          pip install --upgrade setuptools
          python setup.py install_linters
      - name: Generate matrix from setup.py
        id: set-matrix
        run: |
          python -c "from setup import GITHUB_MATRIX; print(GITHUB_MATRIX)" > matrix.json
          echo "matrix=$(<matrix.json)" >> $GITHUB_OUTPUT
      - name: Check version EOF
        run: |
          python -c "import json
          from urllib.request import Request, urlopen
          from datetime import date, datetime, timedelta
          from setup import DJANGO_VERSIONS, PYTHON_VERSIONS
          today = date.today()
          WARNING_DAYS = timedelta(days=90)
          version_by_product = {
              'django': DJANGO_VERSIONS,
              'python': PYTHON_VERSIONS
          }
          for product, supported_versions in version_by_product.items():
              url = f'https://endoflife.date/api/{product}.json'
              with urlopen(Request(url)) as httpresponse:
                  data = json.loads(httpresponse.read())
              for detail in data:
                  version = detail['cycle']
                  eol = detail['eol']
                  eol_date = datetime.strptime(eol, '%Y-%m-%d').date()
                  if version not in supported_versions:
                      if eol_date > today:
                          print(f'::error ::{product} v{version}: is not in the supported versions list')
                      continue
                  if eol_date < today:
                      print(f'::error ::{product} v{version}: EOL was {eol}')
                  elif eol_date - today < WARNING_DAYS:
                      print(f'::warning ::{product} v{version}: EOL is coming up on the {eol}')"
      - name: iSort check
        if: always()
        run: isort --check .
      - name: Black check
        if: always()
        run: black --config .black --check .
      - name: Flake8 check
        if: always()
        run: flake8 .
      - name: Ruff check
        if: always()
        run: ruff check .
      - name: rst check
        if: always()
        run: rst-lint .
      - name: Continue
        if: always()
        run: exit 0

  tests:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    name: Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ matrix.python-version }}-dj-${{ matrix.django-version }}
      - name: Install prerequisites
        run: |
          echo ARTIFACT_NAME=coverage_${{ runner.os }}-py-${{ matrix.python-version }}-dj-${{ matrix.django-version }} | sed 's|\.\*||g' >> "$GITHUB_ENV"
          DJANGO="django==${{ matrix.django-version }}"
          if [[ "${{ matrix.django-version }}" == "main" ]]; then
            DJANGO="git+https://github.com/django/django.git@main"
          fi
          python -m pip install --upgrade pip setuptools codecov pip install codecov $DJANGO
      - name: Install packages
        run: pip install -e '.[test]'
      - name: Run tests
        run: pytest --cov django_squash --cov-report=term -m 'not slow'
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: .coverage
          retention-days: 1

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    if: success() || failure()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install coverage
        run: pip install coverage
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
      - name: Clean up temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
            name: coverage_*
      - name: Combine coverage.py
        run: |
          coverage combine $(find downloaded_artifacts/ -type f | xargs)
          coverage xml
      - name: Upload single coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: .coverage
          path: .coverage
          retention-days: 1

      # - name: Place reports' artifacts
      #   run: rsync -av downloaded_artifacts/*/*/ unit_test_reports/
      # - name: Check reports existence
      #   id: check_files
      #   uses: andstor/file-existence-action@v1
      #   with:
      #     files: 'unit_test_reports/**/test-*.xml'
      # - name: Import results to Xray
      #   run: ls -R unit_test_reports/

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     fail_ci_if_error: true
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     env_vars: OS,RUST
