name: Test Include

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

env:
  DEFAULT_PYTHON_VERSION: 3.12

jobs:
  prepare-matrix:
    name: Prepare Python/Django matrix
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install the linters
        run: |
          pip install --upgrade setuptools toml
          pip install $(python -c 'import toml; print(" ".join(toml.load(open("pyproject.toml"))["project"]["optional-dependencies"]["lint"]))')
      - name: Generate matrix
        run: |
          python -c '
          import toml
          import itertools
          import json
          import os

          DJANGO_VERSIONS = []
          PYTHON_VERSIONS = []
          EXCLUDE_MATRIX = (["3.8", "3.9"], ["5.0.*", "5.1.*", "main"])

          def is_number(s):
              try:
                  float(s)
                  return True
              except ValueError:
                  return False

          with open("pyproject.toml") as f:
              conf = toml.load(f)
          for classifier in conf["project"]["classifiers"]:
              if "Framework :: Django ::" in classifier:
                  version = classifier.split("::")[-1].strip()
                  if "." in version and is_number(version):
                      DJANGO_VERSIONS.append(version)
              elif "Programming Language :: Python ::" in classifier:
                  version = classifier.split("::")[-1].strip()
                  if "." in version and is_number(version):
                      PYTHON_VERSIONS.append(version)

          matrix = {
              "python-version": PYTHON_VERSIONS,
              "django-version": [f"{v}.*" for v in DJANGO_VERSIONS] + ["main"],
              "exclude": [{"django-version": d, "python-version": p} for p, d in itertools.product(*EXCLUDE_MATRIX)],
          }

          with open(os.getenv("GITHUB_ENV"), "a") as env_file:
              pretty = " ".join(DJANGO_VERSIONS)
              env_file.write(f"django={pretty}\n")
              pretty = " ".join(PYTHON_VERSIONS)
              env_file.write(f"python={pretty}\n")
              env_file.write(f"matrix={json.dumps(matrix)}\n")
          '
      - name: Check version EOF
        id: set-matrix
        run: |
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          python -c "
          import os
          import json
          from urllib.request import Request, urlopen
          from datetime import date, datetime, timedelta

          DJANGO_VERSIONS = os.getenv('django').split()
          PYTHON_VERSIONS = os.getenv('python').split()

          today = date.today()
          WARNING_DAYS = timedelta(days=90)
          version_by_product = {
              'django': DJANGO_VERSIONS,
              'python': PYTHON_VERSIONS
          }
          for product, supported_versions in version_by_product.items():
              url = f'https://endoflife.date/api/{product}.json'
              with urlopen(Request(url)) as response:
                  data = json.loads(response.read())
              for detail in data:
                  version = detail['cycle']
                  eol = detail['eol']
                  eol_date = datetime.strptime(eol, '%Y-%m-%d').date()
                  if version not in supported_versions:
                      if eol_date > today:
                          print(f'::error ::{product} v{version}: is not in the supported versions list')
                      continue
                  if eol_date < today:
                      print(f'::error ::{product} v{version}: EOL was {eol}')
                  elif eol_date - today < WARNING_DAYS:
                      print(f'::warning ::{product} v{version}: EOL is coming up on the {eol}')
          "
      - name: iSort check
        if: always()
        run: isort --check .
      - name: Black check
        if: always()
        run: black --check .
      - name: Flake8 check
        if: always()
        run: flake8 .
      - name: Ruff check
        if: always()
        run: ruff check .
      - name: rst check
        if: always()
        run: rst-lint .
      - name: Continue
        if: always()
        run: exit 0

  tests:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    name: Python ${{ matrix.python-version }} - Django ${{ matrix.django-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-py-${{ matrix.python-version }}-dj-${{ matrix.django-version }}
      - name: Install prerequisites
        run: |
          echo ARTIFACT_NAME=coverage_${{ runner.os }}-py-${{ matrix.python-version }}-dj-${{ matrix.django-version }} | sed 's|\.\*||g' >> "$GITHUB_ENV"
          DJANGO="django==${{ matrix.django-version }}"
          if [[ "${{ matrix.django-version }}" == "main" ]]; then
            DJANGO="git+https://github.com/django/django.git@main"
          fi
          python -m pip install --upgrade pip setuptools codecov-cli $DJANGO
      - name: Install packages
        run: pip install -e '.[test]'
      - name: Run tests
        run: pytest --cov django_squash --cov-report=term
      - name: temp
        run: pwd; ls -lsash
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./.coverage
          retention-days: 1

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    if: success() || failure()
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}
      - name: Install coverage
        run: pip install coverage
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
      - name: Clean up temporary artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: coverage_*
      - name: Combine coverage.py
        run: |
          ls -ls downloaded_artifacts
          coverage combine $(find downloaded_artifacts/ -type f | xargs)
          coverage xml
      - name: Upload single coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: .coverage
          path: .coverage
          retention-days: 1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,RUST
